_____________________________ L Ó G I C A    D E   P R O G R A M A Ç Ã O _____________________________


No mundo da tecnologia, se tem o software e o hardware. Mas você sabia que existem 3 TIPOS  de SOFTWARE?

São eles:            Programação            //            Sistema          //            Aplicação

              São softwares que, a partir        Softwares de sistema ou         realizam ações específicas 
              de linguagens de programação       de base permitem a execu-       solicitadas pelos usuários. 
              , como Java, Python, Swift,        ção de outros softwares,        Trata-se de programas que 
              são utilizados para o desen-       São responsáveis pela co-       são executados dentro do 
              volvimento de outros progra-       municação entre o compu-        sistema operacional. Word, 
              mas.                               tador e o usuário. Siste-       Excel, paint, bloco de no-
                                                 mas operacionais, como          tas, calculadora e jogos 
                                                 Windows, MacOS, Linux, iOS,     são exemplos deste tipo de 
                                                 Android são exemplos de         software.
                                                 softwares de sistema.



    Podem-se destacar três estruturas fundamentais para o funcionamento adequado do computador: shell, kernell 
e hardware.

SHELL -------->

É a interface de interação com o usuário, ou seja, onde ele realiza a inserção de dados para solicitar as tarefas e ações desejadas.

Há dois tipos de shell:

CLI (Comand Line Interface) – interface de linha de comando, também chamada de modo texto.
GUI (Graphical User Interface) – interface gráfica do usuário, também chamada de modo gráfico.


KERNELL -------->

Realiza o papel de interação entre o hardware e o software.


HARDWARE -------->

São os elementos físicos, como os componentes eletrônicos.



FLUXOGRAMAS. Conheça alguns: <-----------------

LucidChart
Draw.io



E S T R U T U R A   D E   D A D O S ____________________________________________________________________


- list 
Uma lista armazena dados do mesmo tipo em sequência. Os dados não precisam estar necessariamente 
armazenados em sequência física na memória do computador, mas há uma sequência lógica entre eles. 
Cada elemento da lista é chamado de nó.

- queue
A fila é uma estrutura do tipo first in first out (FIFO), na qual o primeiro elemento a ser 
inserido será o primeiro a ser retirado.

- stacks
A pilha é uma estrutura do tipo last in first out (LIFO). O último elemento a ser inserido será o
primeiro elemento a ser retirado

- array ou matriz)
Um vetor é uma estrutura que armazena uma sequência de objetos do mesmo tipo, em posição consecutiva 
lógica e física, sendo possível alcançar qualquer item diretamente. Não é necessário passar pelo 
primeiro ou último elemento.


C A R A C T E R Í S T I C A S   D A S   L I N G U A G E N S __________________________________________
 

Linguagem de Marcação -> são utilizadas para definir a estrutura de uma página ou de um documento,
A linguagem de marcação HTML (Hyper Text Markup) é uma das mais comuns.

Folha de Estilos -> são utilizadas para estilizar os elementos de uma página desenvolvida com uma 
linguagem de marcação. Exemplo: utilizamos CSS.

Programação -> são um conjunto de regras, sintaxes para escrevermos instruções, que farão com que o 
computador ou software execute alguma ação.


T I P O S   D E   L I N G U A G E N S ____________________________________________________________________

Estruturada -> Trabalha apenas com um arquivo, codificando o algoritmo linha após linha seguindo uma 
sequência lógica de evento. Exemplos: C#, Delphi, Dart, Java, Kotlin, PHP, TypeScript.

Orientada a objeto -> Focando na reutilização de código para facilitar a manutenção de sistemas. 
Habilidoso na composição e interação entre diversas unidades de software para criar soluções eficientes.
Exemplos: C++, VB .NET, Java, Object Pascal, Objective-C, Python, SuperColider, Ruby, Smalltalk...

Funcional - Atua com funções chamadas mais de uma vez, que possuem o mesmo resultado de saída. São 
aplicadas para resolver problemas que envolvem principalmente paralelismo e/ou processamento de 
quantidades grandes de dados. Exemplos: Prolog, Lisp, Scheme, ML, Miranda, Haskell, Elixir.



N Í V E I S   D E   L I N G U A G E N S   D E   P R O G R A M A Ç Ã O __________________________________________

Alto nível -> Linguagens de alto nível são mais intuitivas e amigáveis para o programador. Ela é mais 
semântica e mais próxima à linguagem natural. Exemplos: JavaScript, Java, C#, PHP.

Baixo nível -> Linguagens de baixo nível são voltadas para o entendimento da máquina. A sintaxe costuma 
ser mais complexa e menos intuitiva para programador. Assembly é um exemplo de linguagem de baixo nível.


